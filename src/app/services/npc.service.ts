import { Injectable } from '@angular/core';
import { BehaviorSubject, Observable, interval } from 'rxjs';
import { INpcState } from '../models/npc.model';
import { GameDataService } from './game-data.service';
import { TimeService } from './time.service';

export interface NpcDefinition {
  id: string;
  name: string;
  emoji: string;
  personality: string;
  defaultSchedule: Record<string, string>;
  dialogues: {
    greeting: string[];
    daily: string[];
    gift: string[];
  };
}

@Injectable({
  providedIn: 'root'
})
export class NpcService {
  private npcs: INpcState[] = [];
  private npcs$ = new BehaviorSubject<INpcState[]>(this.npcs);
  private npcDefinitions: Map<string, NpcDefinition> = new Map();
  private moveInterval: any;

  constructor(
    private gameDataService: GameDataService,
    private timeService: TimeService
  ) {
    this.initializeNpcDefinitions();
    this.initializeNpcs();
    
    this.gameDataService.getGameState().subscribe(state => {
      if (state.npcs && state.npcs.length > 0) {
        this.npcs = state.npcs;
        this.npcs$.next(this.npcs);
      }
    });

    // Start NPC movement
    this.startNpcMovement();
    
    // Subscribe to time changes for schedule
    this.timeService.onHourChange.subscribe(() => {
      this.updateNpcSchedules();
    });
  }

  private initializeNpcDefinitions(): void {
    const definitions: NpcDefinition[] = [
      {
        id: 'farmer_wang',
        name: 'ÁéãÂ§ßÁà∑',
        emoji: 'üë®‚Äçüåæ',
        personality: 'ÂèãÂñÑÁöÑËÄÅÂÜúÊ∞ë',
        defaultSchedule: {
          '6': 'Âú®ÂÜúÁî∞Â∑•‰Ωú',
          '12': 'Âú®ÂÆ∂‰ºëÊÅØ',
          '14': 'Âú®Â∏ÇÂú∫',
          '18': 'ÂõûÂÆ∂',
          '22': 'Áù°Ëßâ'
        },
        dialogues: {
          greeting: [
            '‰Ω†Â•ΩÂïäÔºåÂπ¥ËΩª‰∫∫ÔºÅ',
            '‰ªäÂ§©Â§©Ê∞îÁúü‰∏çÈîôÔºÅ',
            'ÂèàÊòØÁæéÂ•ΩÁöÑ‰∏ÄÂ§©ÔºÅ'
          ],
          daily: [
            'ËÆ∞ÂæóË¶ÅÊØèÂ§©Áªô‰ΩúÁâ©ÊµáÊ∞¥Âì¶ÔºÅ',
            'Ëøô‰∏™Â≠£ËäÇÁßçËêùÂçúÊúÄÂêàÈÄÇ‰∫Ü„ÄÇ',
            'ÊàëÂπ¥ËΩªÊó∂‰πüÂÉè‰Ω†ËøôÊ†∑Âã§Âä≥„ÄÇ'
          ],
          gift: [
            'Ë∞¢Ë∞¢‰Ω†ÁöÑÁ§ºÁâ©ÔºÅ',
            '‰Ω†ÁúüÊòØÂ§™ÂÆ¢Ê∞î‰∫ÜÔºÅ',
            'Êàë‰ºöÂ•ΩÂ•ΩÁèçÊÉúÁöÑ„ÄÇ'
          ]
        }
      },
      {
        id: 'merchant_li',
        name: 'ÊùéÂïÜ‰∫∫',
        emoji: 'üßë‚Äçüíº',
        personality: 'Á≤æÊòéÁöÑÂïÜ‰∫∫',
        defaultSchedule: {
          '8': 'ÂºÄÂ∫ó',
          '12': 'Âçà‰ºë',
          '13': 'ÁªßÁª≠Ëê•‰∏ö',
          '20': 'ÂÖ≥Â∫ó'
        },
        dialogues: {
          greeting: [
            'Ê¨¢ËøéÂÖâ‰∏¥ÔºÅ',
            '‰ªäÂ§©ÊÉ≥‰π∞ÁÇπ‰ªÄ‰πàÔºü',
            'ÊàëËøôÈáåË¥ßÁâ©ÈΩêÂÖ®ÔºÅ'
          ],
          daily: [
            'ÊúÄËøëÊú®ÊùêÂæàÊä¢ÊâãÂë¢„ÄÇ',
            'Áü≥Â§¥ÁöÑ‰ª∑Ê†ºÊ∂®‰∫Ü‰∏çÂ∞ë„ÄÇ',
            '‰Ω†ÁöÑÂÜú‰ΩúÁâ©ÂçñÂæóÊÄé‰πàÊ†∑Ôºü'
          ],
          gift: [
            'Âì¶ÔºåËøôÂèØÁúü‰∏çÈîôÔºÅ',
            '‰Ω†Áúü‰ºöÂÅöÁîüÊÑèÔºÅ',
            '‰∏ãÊ¨°Áªô‰Ω†‰∏™Â•Ω‰ª∑Èí±„ÄÇ'
          ]
        }
      },
      {
        id: 'girl_mei',
        name: 'Â∞èÊ¢Ö',
        emoji: 'üë©‚Äçüåæ',
        personality: 'Ê¥ªÊ≥ºÁöÑÂ•≥Â≠©',
        defaultSchedule: {
          '7': 'Âú®Ëä±Âõ≠',
          '10': 'Âú®Ê≤≥Ëæπ',
          '15': 'Âú®ÂπøÂú∫',
          '19': 'ÂõûÂÆ∂'
        },
        dialogues: {
          greeting: [
            'Âó®ÔºÅ‰ªäÂ§©ËøáÂæóÊÄé‰πàÊ†∑Ôºü',
            'ÂèàËßÅÈù¢‰∫ÜÔºÅ',
            '‰Ω†ÁöÑÂÜúÂú∫ÁúüÊºÇ‰∫ÆÔºÅ'
          ],
          daily: [
            'ÊàëÊúÄÂñúÊ¨¢Ëä±‰∫ÜÔºÅ',
            'Ê≤≥ËæπÁöÑÈ£éÊôØÁúüÁæé„ÄÇ',
            'Ë¶Å‰∏çË¶Å‰∏ÄËµ∑ÂéªÊï£Ê≠•Ôºü'
          ],
          gift: [
            'ÂìáÔºÅÊàëÊúÄÂñúÊ¨¢Ëøô‰∏™‰∫ÜÔºÅ',
            '‰Ω†ÊÄé‰πàÁü•ÈÅìÊàëÊÉ≥Ë¶ÅËøô‰∏™Ôºü',
            'Â§™ÊÑüË∞¢‰∫ÜÔºÅ'
          ]
        }
      }
    ];

    definitions.forEach(def => {
      this.npcDefinitions.set(def.id, def);
    });
  }

  private initializeNpcs(): void {
    const initialNpcs: INpcState[] = [
      {
        id: 'farmer_wang',
        name: 'ÁéãÂ§ßÁà∑',
        position: { x: 15, y: 10 },
        relationshipLevel: 0,
        schedule: this.npcDefinitions.get('farmer_wang')!.defaultSchedule,
        dialogueTreeId: 'farmer_wang'
      },
      {
        id: 'merchant_li',
        name: 'ÊùéÂïÜ‰∫∫',
        position: { x: 20, y: 5 },
        relationshipLevel: 0,
        schedule: this.npcDefinitions.get('merchant_li')!.defaultSchedule,
        dialogueTreeId: 'merchant_li'
      },
      {
        id: 'girl_mei',
        name: 'Â∞èÊ¢Ö',
        position: { x: 10, y: 15 },
        relationshipLevel: 0,
        schedule: this.npcDefinitions.get('girl_mei')!.defaultSchedule,
        dialogueTreeId: 'girl_mei'
      }
    ];

    this.npcs = initialNpcs;
    this.npcs$.next(this.npcs);
    this.gameDataService['gameState'].npcs = this.npcs;
  }

  getNpcs(): Observable<INpcState[]> {
    return this.npcs$.asObservable();
  }

  getNpcAt(x: number, y: number): INpcState | null {
    return this.npcs.find(npc => 
      npc.position.x === x && npc.position.y === y
    ) || null;
  }

  getNpcNear(x: number, y: number, range: number = 1): INpcState | null {
    return this.npcs.find(npc => {
      const distance = Math.abs(npc.position.x - x) + Math.abs(npc.position.y - y);
      return distance <= range;
    }) || null;
  }

  private startNpcMovement(): void {
    // Move NPCs randomly every 5 seconds
    this.moveInterval = setInterval(() => {
      this.npcs.forEach(npc => {
        // Random movement
        const direction = Math.floor(Math.random() * 5); // 0-4, where 4 means no movement
        let newX = npc.position.x;
        let newY = npc.position.y;

        switch(direction) {
          case 0: newY = Math.max(0, newY - 1); break; // Up
          case 1: newY = Math.min(19, newY + 1); break; // Down
          case 2: newX = Math.max(0, newX - 1); break; // Left
          case 3: newX = Math.min(29, newX + 1); break; // Right
          // case 4: no movement
        }

        npc.position = { x: newX, y: newY };
      });

      this.npcs$.next(this.npcs);
      this.gameDataService['gameState'].npcs = this.npcs;
    }, 5000);
  }

  private updateNpcSchedules(): void {
    const currentHour = this.timeService.getTimeState().hour;
    
    this.npcs.forEach(npc => {
      const activity = npc.schedule[currentHour.toString()];
      if (activity) {
        console.log(`${npc.name}: ${activity}`);
      }
    });
  }

  talkToNpc(npcId: string): string {
    const npc = this.npcs.find(n => n.id === npcId);
    const definition = this.npcDefinitions.get(npcId);
    
    if (!npc || !definition) return '...';

    // Get random dialogue based on relationship level
    let dialogues: string[];
    if (npc.relationshipLevel < 2) {
      dialogues = definition.dialogues.greeting;
    } else {
      dialogues = definition.dialogues.daily;
    }

    const dialogue = dialogues[Math.floor(Math.random() * dialogues.length)];
    
    // Increase relationship slightly
    this.increaseRelationship(npcId, 1);
    
    return dialogue;
  }

  giveGift(npcId: string): string {
    const npc = this.npcs.find(n => n.id === npcId);
    const definition = this.npcDefinitions.get(npcId);
    
    if (!npc || !definition) return '...';

    const dialogues = definition.dialogues.gift;
    const dialogue = dialogues[Math.floor(Math.random() * dialogues.length)];
    
    // Increase relationship significantly
    this.increaseRelationship(npcId, 10);
    
    return dialogue;
  }

  private increaseRelationship(npcId: string, amount: number): void {
    const npc = this.npcs.find(n => n.id === npcId);
    if (npc) {
      npc.relationshipLevel = Math.min(100, npc.relationshipLevel + amount);
      this.npcs$.next(this.npcs);
      this.gameDataService['gameState'].npcs = this.npcs;
    }
  }

  getNpcDefinition(npcId: string): NpcDefinition | undefined {
    return this.npcDefinitions.get(npcId);
  }

  ngOnDestroy(): void {
    if (this.moveInterval) {
      clearInterval(this.moveInterval);
    }
  }
}